/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var helson = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,7],$V1=[1,8],$V2=[1,11],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,28],$V9=[1,26],$Va=[12,14,38,40,41,42,43,46,48],$Vb=[1,40],$Vc=[38,46],$Vd=[1,90],$Ve=[12,14,38,40,41,42,43,46,48,66],$Vf=[63,66],$Vg=[47,66],$Vh=[47,75],$Vi=[1,122],$Vj=[12,14,38,40,41,42,43,46,47,48,66];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_repetition0":4,"EOF":5,"type_def":6,"TYPEDEF":7,"S_ID":8,"def_body":9,"OPEN_CURB":10,"def_body_repetition_plus0":11,"CLOSE_CURB":12,"pair":13,"OPTIONAL":14,"pair_def":15,"str_key":16,"COLON":17,"str_value":18,"pair_def_option0":19,"num_key":20,"num_value":21,"pair_def_option1":22,"bool_key":23,"bool_value":24,"pair_def_option2":25,"ref_key":26,"ref_value":27,"pair_def_option3":28,"obj_key":29,"obj_value":30,"pair_def_option4":31,"str_arr_key":32,"str_arr_value":33,"pair_def_option5":34,"any_key":35,"any_value":36,"pair_def_option6":37,"STR":38,"attr":39,"NUM":40,"BOOL":41,"REFERENCE":42,"OBJ":43,"str_arr_key_repetition_plus0":44,"sqb":45,"OPEN_SQB":46,"CLOSE_SQB":47,"ANY":48,"TEXT":49,"IDENTITY":50,"FAIL":51,"str_arr_body_valid":52,"str_arr_value_group0":53,"str_arr_body":54,"open_sqb_hook":55,"str_arr_body_option0":56,"str_arr_body_repetition0":57,"close_sqb_hook":58,"str_arr_body_repetition1":59,"REGEX":60,"CTX_USER_FN":61,"intervals":62,"NUMERIC":63,"intervals_group0":64,"intervals_option0":65,"COMMA":66,"intervals_option1":67,"intervals_group1":68,"TRUE":69,"TRUTHY":70,"FALSE":71,"FALSY":72,"UNORDERED":73,"OPEN_BRAC":74,"CLOSE_BRAC":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"TYPEDEF",8:"S_ID",10:"OPEN_CURB",12:"CLOSE_CURB",14:"OPTIONAL",17:"COLON",38:"STR",40:"NUM",41:"BOOL",42:"REFERENCE",43:"OBJ",46:"OPEN_SQB",47:"CLOSE_SQB",48:"ANY",49:"TEXT",50:"IDENTITY",51:"FAIL",60:"REGEX",61:"CTX_USER_FN",63:"NUMERIC",66:"COMMA",69:"TRUE",70:"TRUTHY",71:"FALSE",72:"FALSY",73:"UNORDERED",74:"OPEN_BRAC",75:"CLOSE_BRAC"},
productions_: [0,[3,2],[6,3],[9,3],[13,2],[13,1],[15,4],[15,4],[15,4],[15,4],[15,4],[15,4],[15,4],[16,2],[20,2],[23,2],[26,3],[29,2],[32,2],[45,2],[35,2],[39,1],[33,1],[33,1],[33,1],[33,2],[52,1],[54,4],[54,4],[55,1],[58,1],[18,1],[18,1],[18,1],[18,1],[18,1],[21,1],[21,1],[21,1],[21,1],[21,1],[62,5],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[27,1],[27,1],[27,1],[30,1],[30,1],[30,1],[30,1],[36,1],[36,1],[4,0],[4,2],[11,1],[11,2],[19,0],[19,1],[22,0],[22,1],[25,0],[25,1],[28,0],[28,1],[31,0],[31,1],[34,0],[34,1],[37,0],[37,1],[44,1],[44,2],[53,1],[53,1],[56,0],[56,1],[57,0],[57,3],[59,0],[59,3],[64,1],[64,1],[65,0],[65,1],[67,0],[67,1],[68,1],[68,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return parseTree.makeEntry(Program, { /* empty */ }, $$[$0-1]) 
break;
case 2:
 this.$ = parseTree.makeEntry(StructureDefinition, {},
                                                    [parseTree.makeEntry(StructureIdentifier, { type: $$[$0-2], id: $$[$0-1] }), $$[$0]]) 
break;
case 3:
this.$ = parseTree.makeEntry(StructureBody, {}, $$[$0-1]);
break;
case 4:
this.$ = parseTree.makeEntry(PairDefinition, { isOptional: true }, $$[$0]);
break;
case 5:
this.$ = parseTree.makeEntry(PairDefinition, { isOptional: false }, $$[$0]);
break;
case 6:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Str, id: $$[$0-3] }),
                                                          parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 7:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Num, id: $$[$0-3] }),
                                                          parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 8:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Bool, id: $$[$0-3] }),
                                                          parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 9:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Ref, typeArgs: $$[$0-3][0], id: $$[$0-3][1] }),
                                                           parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 10:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Obj, id: $$[$0-3] }),
                                                           parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 11:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Arr, id: $$[$0-3] }),
                                                           parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 12:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Any, id: $$[$0-3] }),
                                                       parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 13: case 14: case 15: case 17: case 20:
 this.$ = $$[$0] 
break;
case 16:
 this.$ = [$$[$0-1], $$[$0]] 
break;
case 18:
 dim = $$[$0-1].length; this.$ = $$[$0] 
break;
case 21:
 this.$ = yytext.replace(/^"|"$/g, ''); (collector && collector.push(this.$)); 
break;
case 22: case 23: case 24: case 31: case 32: case 36: case 37: case 38: case 49: case 50: case 52: case 53: case 56: case 57:
 this.$ = ({ type: Fn,  value: $$[$0] }) 
break;
case 26:

                                                    buffer = rcg;
                                                    // rcgCount and stack would reset to ideal count here
                                                    rcg = null;
                                                    ptrToCurrentRCG = null;
                                                    dimEqstatus = valueDims.reduce(
                                                        (carry, val) => val === carry ? carry : -1,
                                                        dim
                                                    );
                                                    if (dimEqstatus === -1) {
                                                        throw new Error('Array dimension does not match');
                                                    }
                                                    valueDims.length = 0;
                                                    this.$ = buffer
                                                
break;
case 27: case 28:
 this.$ = rcg 
break;
case 29:

                                                    ptrToCurrentRCG = [];
                                                    if (parent = stack[stack.length - 1]) {
                                                        delete parent.__leaf__;
                                                        parent.push(ptrToCurrentRCG);
                                                    } else {
                                                        // Start of stack. Root.
                                                        rcg = ptrToCurrentRCG 
                                                    }
                                                    // Assign a leaf flag which later be deleted if the node becomes
                                                    // parent
                                                    ptrToCurrentRCG.__leaf__ = true;
                                                    stack.push(ptrToCurrentRCG);
                                                    collector = ptrToCurrentRCG;
                                                    rcgCount += 1;
                                                
break;
case 30:

                                                    abductedNode = stack.splice(stack.length - 1, 1)[0];
                                                    if (abductedNode.__leaf__) {
                                                        valueDims.push(rcgCount);
                                                        delete abductedNode.__leaf__;
                                                    }
                                                    collector = null;
                                                    rcgCount -= 1;
                                                
break;
case 33: case 39:
 this.$ = ({ type: Fn,  value: AbEq, args: [$$[$0]] }) 
break;
case 34:
 this.$ = ({ type: Fn,  value: AbEq, args: [$$[$0], Word.Transformer.Str.Pattern] }) 
break;
case 35: case 40: case 51: case 55:
 this.$ = ({ type: UFn, value: $$[$0] }) 
break;
case 41:
 this.$ = `${
                                                    $$[$0-4] === "(" ? "lo" : "lc"
                                                }${
                                                    $$[$0] === ")" ? "ro" : "rc"
                                                }Range,${$$[$0-3] || null},${$$[$0-1] || null}` 
break;
case 42: case 43: case 45: case 47:
 this.$ = ({ type: Fn,   value: $$[$0] }) 
break;
case 44: case 46:
 this.$ = ({ type: Fn,   value: AbEq, args: [$$[$0]] }) 
break;
case 48:
 this.$ = ({ type: UFn,  value: $$[$0] }) 
break;
case 54:
 this.$ = ({ type: Rec, value: $$[$0] }) 
break;
case 58: case 82: case 84:
this.$ = [];
break;
case 59: case 61: case 77:
$$[$0-1].push($$[$0]);
break;
case 60: case 76:
this.$ = [$$[$0]];
break;
case 83: case 85:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [o($V0,[2,58],{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:[1,5]},{1:[2,1]},o($V0,[2,59]),{8:[1,6]},{9:7,10:$V1},o($V0,[2,2]),{11:9,13:10,14:$V2,15:12,16:13,20:14,23:15,26:16,29:17,32:18,35:19,38:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:25,45:27,46:$V8,48:$V9},{12:[1,29],13:30,14:$V2,15:12,16:13,20:14,23:15,26:16,29:17,32:18,35:19,38:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:25,45:27,46:$V8,48:$V9},o($Va,[2,60]),{15:31,16:13,20:14,23:15,26:16,29:17,32:18,35:19,38:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:25,45:27,46:$V8,48:$V9},o($Va,[2,5]),{17:[1,32]},{17:[1,33]},{17:[1,34]},{17:[1,35]},{17:[1,36]},{17:[1,37]},{17:[1,38]},{39:39,49:$Vb},{39:41,49:$Vb},{39:42,49:$Vb},{8:[1,43]},{39:44,49:$Vb},{16:45,38:$V3,45:46,46:$V8},{39:47,49:$Vb},o($Vc,[2,76]),{47:[1,48]},o([5,7,12,14,38,40,41,42,43,46,48,66],[2,3]),o($Va,[2,61]),o($Va,[2,4]),{18:49,39:52,49:$Vb,50:[1,50],51:[1,51],60:[1,53],61:[1,54]},{21:55,46:[1,63],50:[1,56],51:[1,57],61:[1,60],62:58,63:[1,59],64:61,74:[1,62]},{24:64,50:[1,65],51:[1,66],61:[1,71],69:[1,67],70:[1,68],71:[1,69],72:[1,70]},{27:72,50:[1,73],51:[1,74],61:[1,75]},{9:79,10:$V1,30:76,50:[1,77],51:[1,78],61:[1,80]},{33:81,46:$Vd,50:[1,82],51:[1,83],52:84,53:85,54:86,55:89,61:[1,88],73:[1,87]},{36:91,50:[1,92],51:[1,93]},{17:[2,13]},o([12,14,17,38,40,41,42,43,46,47,48,66],[2,21]),{17:[2,14]},{17:[2,15]},{39:94,49:$Vb},{17:[2,17]},{17:[2,18]},o($Vc,[2,77]),{17:[2,20]},o($Vc,[2,19]),o($Va,[2,62],{19:95,66:[1,96]}),o($Ve,[2,31]),o($Ve,[2,32]),o($Ve,[2,33]),o($Ve,[2,34]),o($Ve,[2,35]),o($Va,[2,64],{22:97,66:[1,98]}),o($Ve,[2,36]),o($Ve,[2,37]),o($Ve,[2,38]),o($Ve,[2,39]),o($Ve,[2,40]),{63:[1,100],65:99,66:[2,88]},o($Vf,[2,86]),o($Vf,[2,87]),o($Va,[2,66],{25:101,66:[1,102]}),o($Ve,[2,42]),o($Ve,[2,43]),o($Ve,[2,44]),o($Ve,[2,45]),o($Ve,[2,46]),o($Ve,[2,47]),o($Ve,[2,48]),o($Va,[2,68],{28:103,66:[1,104]}),o($Ve,[2,49]),o($Ve,[2,50]),o($Ve,[2,51]),o($Va,[2,70],{31:105,66:[1,106]}),o($Ve,[2,52]),o($Ve,[2,53]),o($Ve,[2,54]),o($Ve,[2,55]),o($Va,[2,72],{34:107,66:[1,108]}),o($Ve,[2,22]),o($Ve,[2,23]),o($Ve,[2,24]),{46:$Vd,52:109,54:86,55:89},o($Ve,[2,26]),{46:[2,78]},{46:[2,79]},o($Vg,[2,80],{55:89,56:110,54:111,39:112,46:$Vd,49:$Vb}),o([46,47,49,66],[2,29]),o($Va,[2,74],{37:113,66:[1,114]}),o($Ve,[2,56]),o($Ve,[2,57]),{17:[2,16]},o($Va,[2,6]),o($Va,[2,63]),o($Va,[2,7]),o($Va,[2,65]),{66:[1,115]},{66:[2,89]},o($Va,[2,8]),o($Va,[2,67]),o($Va,[2,9]),o($Va,[2,69]),o($Va,[2,10]),o($Va,[2,71]),o($Va,[2,11]),o($Va,[2,73]),o($Ve,[2,25]),o($Vg,[2,82],{57:116}),o($Vg,[2,84],{59:117}),o($Vg,[2,81]),o($Va,[2,12]),o($Va,[2,75]),o($Vh,[2,90],{67:118,63:[1,119]}),{47:$Vi,58:120,66:[1,121]},{47:$Vi,58:123,66:[1,124]},{47:[1,126],68:125,75:[1,127]},o($Vh,[2,91]),o($Vj,[2,27]),{39:128,49:$Vb},o($Vj,[2,30]),o($Vj,[2,28]),{46:$Vd,54:129,55:89},o($Ve,[2,41]),o($Ve,[2,92]),o($Ve,[2,93]),o($Vg,[2,83]),o($Vg,[2,85])],
defaultActions: {3:[2,1],39:[2,13],41:[2,14],42:[2,15],44:[2,17],45:[2,18],47:[2,20],87:[2,78],88:[2,79],94:[2,16],100:[2,89]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

parseTree = require('./parse-tree');

Word = parseTree.Word
Program = Word.Program
StructureDefinition = Word.StructureDefinition
StructureIdentifier = Word.StructureIdentifier
StructureBody = Word.StructureBody
PairDefinition = Word.PairDefinition
PairComponentKey = Word.PairComponentKey
PairComponentValue = Word.PairComponentValue

Str = Word.Str
Num = Word.Num
Bool = Word.Bool
Ref = Word.Ref
Obj = Word.Obj
Arr = Word.Arr
Any = Word.Any
Fn = Word.Fn
AbEq = Word.AbEq
UFn = Word.UFn
Rec = Word.Rec

dim = null
collector = null
buffer = null
rcg = null /* rcg = recursiveCollectorGroup */
stack = []
valueDims = [];
ptrToCurrentRCG = null
pathRCG = null
rcgCount = 0

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */
break;
case 1:return 7
break;
case 2:return 14
break;
case 3:return 'ENUM'
break;
case 4:return 38
break;
case 5:return 40
break;
case 6:return 41
break;
case 7:return 43
break;
case 8:return 50
break;
case 9:return 51
break;
case 10:return 69
break;
case 11:return 71
break;
case 12:return 70
break;
case 13:return 72
break;
case 14:return 48
break;
case 15:return 'ANYOF'
break;
case 16:return 'ALLOF'
break;
case 17:return 73
break;
case 18:return 46
break;
case 19:return 47
break;
case 20:return 74
break;
case 21:return 75
break;
case 22:return 10
break;
case 23:return 12
break;
case 24:return 42
break;
case 25:return 'OR'
break;
case 26:return 17
break;
case 27:return 66
break;
case 28:return 'NOT'
break;
case 29:return 60
break;
case 30:return 8
break;
case 31:return 61
break;
case 32:return 63
break;
case 33:return 49
break;
case 34:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:typdef\b)/,/^(?:optnl\b)/,/^(?:enum\b)/,/^(?:str\b)/,/^(?:num\b)/,/^(?:bool\b)/,/^(?:obj\b)/,/^(?:pass\b)/,/^(?:fail\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:truthy\b)/,/^(?:falsy\b)/,/^(?:any\b)/,/^(?:anyOf\b)/,/^(?:allOf\b)/,/^(?:unordered\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:`)/,/^(?:\|)/,/^(?::)/,/^(?:,)/,/^(?:!)/,/^(?:(\/.*\/))/,/^(?:([A-Z][a-zA-Z0-9_]*))/,/^(?:([a-zA-Z_]+[a-zA-Z0-9_]*))/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:("[^"]*"))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = helson;
exports.Parser = helson.Parser;
exports.parse = function () { return helson.parse.apply(helson, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}