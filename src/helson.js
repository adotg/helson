/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var helson = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,11,115,116],$V1=[1,13],$V2=[1,32],$V3=[1,33],$V4=[1,34],$V5=[1,35],$V6=[1,20],$V7=[1,36],$V8=[1,38],$V9=[1,40],$Va=[12,14,16,18,22,40,68,71,85],$Vb=[1,62],$Vc=[22,72],$Vd=[1,78],$Ve=[1,79],$Vf=[1,81],$Vg=[5,11,12,14,16,18,22,40,68,71,85,91,115,116],$Vh=[1,83],$Vi=[1,84],$Vj=[1,86],$Vk=[1,87],$Vl=[1,89],$Vm=[1,90],$Vn=[1,93],$Vo=[1,96],$Vp=[1,92],$Vq=[1,95],$Vr=[1,98],$Vs=[1,99],$Vt=[1,104],$Vu=[1,100],$Vv=[1,101],$Vw=[1,102],$Vx=[1,103],$Vy=[1,120],$Vz=[12,14,16,18,85],$VA=[12,14,16,18,22,40,68,71,72,85,91],$VB=[88,91],$VC=[12,14,16,18,22,40,68,71,85,91],$VD=[86,91],$VE=[1,184],$VF=[1,191],$VG=[1,192],$VH=[86,119],$VI=[1,218],$VJ=[12,14,16,18,22,40,68,71,85,86,91];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_repetition0":4,"EOF":5,"structs":6,"structs_group0":7,"S_ID":8,"def_body":9,"enum":10,"ENUM":11,"STR":12,"str_enum_body":13,"NUM":14,"num_enum_body":15,"BOOL":16,"bool_enum_body":17,"REFERENCE":18,"obj_value":19,"OPEN_CURB":20,"str_enum_body_repetition0":21,"CLOSE_CURB":22,"str_pair":23,"attr":24,"COLON":25,"str_value":26,"str_pair_option0":27,"num_enum_body_repetition0":28,"num_enum_body_option0":29,"num_pair":30,"num_value":31,"num_pair_option0":32,"bool_enum_body_repetition0":33,"bool_enum_body_option0":34,"bool_pair":35,"bool_value":36,"bool_pair_option0":37,"def_body_repetition_plus0":38,"pair":39,"OPTIONAL":40,"pair_def":41,"str_key":42,"pair_def_option0":43,"num_key":44,"pair_def_option1":45,"bool_key":46,"pair_def_option2":47,"ref_key":48,"ref_value":49,"pair_def_option3":50,"obj_key":51,"pair_def_option4":52,"str_arr_key":53,"str_arr_value":54,"pair_def_option5":55,"num_arr_key":56,"num_arr_value":57,"pair_def_option6":58,"bool_arr_key":59,"bool_arr_value":60,"pair_def_option7":61,"ref_arr_key":62,"ref_arr_value":63,"pair_def_option8":64,"any_key":65,"any_value":66,"pair_def_option9":67,"OBJ":68,"sqbs":69,"sqbs_repetition_plus0":70,"ANY":71,"TEXT":72,"IDENTITY":73,"FAIL":74,"REGEX":75,"CTX_USER_FN":76,"str_arr_body_valid":77,"str_arr_value_group0":78,"str_arr_body":79,"open_sqb_hook":80,"str_arr_body_option0":81,"str_arr_body_repetition0":82,"close_sqb_hook":83,"str_arr_body_repetition1":84,"OPEN_SQB":85,"CLOSE_SQB":86,"intervals":87,"NUMERIC":88,"intervals_group0":89,"intervals_option0":90,"COMMA":91,"intervals_option1":92,"intervals_group1":93,"num_arr_body_valid":94,"num_arr_value_group0":95,"num_arr_body":96,"num_arr_body_option0":97,"num_arr_body_repetition0":98,"num_arr_body_repetition1":99,"num_val_proxy":100,"TRUE":101,"TRUTHY":102,"FALSE":103,"FALSY":104,"bool_arr_body_valid":105,"bool_arr_value_group0":106,"bol_arr_body_valid":107,"bool_arr_body":108,"bool_arr_body_option0":109,"bool_arr_body_repetition0":110,"bool_arr_body_repetition1":111,"bool_val_proxy":112,"ANYOF":113,"ALLOF":114,"TYPEDEF":115,"OLIST":116,"UNORDERED":117,"OPEN_BRAC":118,"CLOSE_BRAC":119,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"S_ID",11:"ENUM",12:"STR",14:"NUM",16:"BOOL",18:"REFERENCE",20:"OPEN_CURB",22:"CLOSE_CURB",25:"COLON",40:"OPTIONAL",68:"OBJ",71:"ANY",72:"TEXT",73:"IDENTITY",74:"FAIL",75:"REGEX",76:"CTX_USER_FN",85:"OPEN_SQB",86:"CLOSE_SQB",88:"NUMERIC",91:"COMMA",101:"TRUE",102:"TRUTHY",103:"FALSE",104:"FALSY",107:"bol_arr_body_valid",113:"ANYOF",114:"ALLOF",115:"TYPEDEF",116:"OLIST",117:"UNORDERED",118:"OPEN_BRAC",119:"CLOSE_BRAC"},
productions_: [0,[3,2],[6,3],[6,1],[10,4],[10,4],[10,4],[10,5],[13,3],[23,4],[15,4],[30,4],[17,4],[35,4],[9,3],[39,2],[39,1],[41,4],[41,4],[41,4],[41,4],[41,4],[41,4],[41,4],[41,4],[41,4],[41,4],[42,2],[44,2],[46,2],[48,3],[51,2],[53,2],[56,2],[59,2],[62,2],[69,1],[65,2],[24,1],[26,1],[26,1],[26,1],[26,1],[26,1],[54,1],[54,1],[54,1],[54,2],[77,1],[79,4],[79,4],[80,1],[83,1],[31,1],[31,1],[31,1],[31,1],[31,1],[87,5],[57,1],[57,1],[57,1],[57,2],[94,1],[96,4],[96,4],[100,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[60,1],[60,1],[60,1],[60,2],[105,1],[108,4],[108,4],[112,1],[112,1],[49,1],[49,1],[49,1],[49,2],[63,1],[63,1],[63,1],[63,1],[63,1],[19,1],[19,1],[19,1],[19,1],[66,1],[66,1],[4,0],[4,2],[7,1],[7,1],[21,0],[21,2],[27,0],[27,1],[28,0],[28,2],[29,0],[29,1],[32,0],[32,1],[33,0],[33,2],[34,0],[34,1],[37,0],[37,1],[38,1],[38,2],[43,0],[43,1],[45,0],[45,1],[47,0],[47,1],[50,0],[50,1],[52,0],[52,1],[55,0],[55,1],[58,0],[58,1],[61,0],[61,1],[64,0],[64,1],[67,0],[67,1],[70,2],[70,3],[78,1],[78,1],[81,0],[81,1],[82,0],[82,3],[84,0],[84,3],[89,1],[89,1],[90,0],[90,1],[92,0],[92,1],[93,1],[93,1],[95,1],[95,1],[97,0],[97,1],[98,0],[98,3],[99,0],[99,3],[106,1],[106,1],[109,0],[109,1],[110,0],[110,3],[111,0],[111,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return parseTree.makeEntry(Program, { /* empty */ }, $$[$0-1]) 
break;
case 2:

                                                    _arrFoundFlag = isArrFound()
                                                    resetFoundBits()
                                                    if ($$[$0-2] === OList && _arrFoundFlag) {
                                                        throw new Error("An ordered list (olist) can't have unbounded array member")
                                                    } else if ($$[$0-2] === Enum && _arrFoundFlag) {
                                                        throw new Error("An enum can't have unbounded array member")
                                                    }
                                                    this.$ = parseTree.makeEntry(StructureDefinition, {},
                                                        [parseTree.makeEntry(StructureIdentifier, { type: $$[$0-2], id: $$[$0-1] }), $$[$0]])
                                                
break;
case 3:
 this.$ = parseTree.makeEntry(StructureDefinition, {}, [$$[$0][0] /* identifier */, $$[$0][1] /* body */]) 
break;
case 4:
 this.$ = [parseTree.makeEntry(StructureIdentifier, { type: $$[$0-3], id: $$[$0-2], typeArgs: Str  }), $$[$0]] 
break;
case 5:
 this.$ = [parseTree.makeEntry(StructureIdentifier, { type: $$[$0-3], id: $$[$0-2], typeArgs: Num  }), $$[$0]] 
break;
case 6:
 this.$ = [parseTree.makeEntry(StructureIdentifier, { type: $$[$0-3], id: $$[$0-2], typeArgs: Bool }), $$[$0]] 
break;
case 7:
 this.$ = [parseTree.makeEntry(StructureIdentifier, { type: $$[$0-4], id: $$[$0-3], typeArgs: Ref  }), $$[$0-1]] 
break;
case 8: case 14:
this.$ = parseTree.makeEntry(StructureBody, {}, $$[$0-1]);
break;
case 9: case 11: case 13:

                                                    this.$ = parseTree.makeEntry(PairDefinition, {}, [
                                                        parseTree.makeEntry(PairComponentKey, { id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1])
                                                    ])
                                                
break;
case 10: case 12:
this.$ = parseTree.makeEntry(StructureBody, {}, $$[$0-2]);
break;
case 15:
this.$ = parseTree.makeEntry(PairDefinition, { isOptional: true }, $$[$0]);
break;
case 16:
this.$ = parseTree.makeEntry(PairDefinition, { isOptional: false }, $$[$0]);
break;
case 17:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Str, id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 18:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Num, id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 19:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Bool, id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 20:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Ref, typeArgs: $$[$0-3][0], id: $$[$0-3][1] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 21:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Obj, id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 22:
 setArrFoundBit(); this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Arr, typeArgs: Str, id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 23:
 setArrFoundBit(); this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Arr, typeArgs: Num, id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 24:
 setArrFoundBit(); this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Arr, typeArgs: Bool, id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 25:
 setArrFoundBit(); this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Arr, typeArgs: $$[$0-3][0][0], id: $$[$0-3][0][1], dim: $$[$0-3][1] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 26:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Any, id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 27: case 28: case 29: case 31: case 37:
 this.$ = $$[$0] 
break;
case 30:
 this.$ = [$$[$0-1], $$[$0]] 
break;
case 32: case 33: case 34:
 dim = $$[$0-1].length; this.$ = $$[$0] 
break;
case 35:
this.$ = [$$[$0], $$[$0-1].length /* dimension */]
break;
case 38:
 this.$ = yytext.replace(/^"|"$/g, ''); collector && collector.push(this.$); 
break;
case 39: case 40: case 44: case 45: case 53: case 54: case 55: case 59: case 60: case 74: case 75: case 83: case 84: case 87: case 88: case 90: case 91: case 92: case 93: case 96: case 97:
 this.$ = ({ type: Fn,  value: $$[$0] }) 
break;
case 41: case 46: case 56: case 61: case 76:
 this.$ = ({ type: Fn,  value: AbEq, args: [$$[$0]] }) 
break;
case 42:
 this.$ = ({ type: Fn,  value: AbEq, args: [$$[$0], Word.Transformer.Str.Pattern] }) 
break;
case 43: case 57: case 85: case 89: case 95:
 this.$ = ({ type: UFn, value: $$[$0] }) 
break;
case 47: case 62: case 77:
 this.$ = ({ type: Fn,  value: $$[$0-1], args: [$$[$0]] }) 
break;
case 48: case 63: case 78:
 checkAndResetArrayDefEquality(); this.$ = buffer; 
break;
case 49: case 50: case 64: case 65: case 79: case 80:
 this.$ = rcg 
break;
case 51:

                                                    ptrToCurrentRCG = [];
                                                    if (parent = stack[stack.length - 1]) {
                                                        delete parent.__leaf__;
                                                        parent.push(ptrToCurrentRCG);
                                                    } else {
                                                        // Start of stack. Root.
                                                        rcg = ptrToCurrentRCG 
                                                    }
                                                    // Assign a leaf flag which later be deleted if the node becomes
                                                    // parent
                                                    ptrToCurrentRCG.__leaf__ = true;
                                                    stack.push(ptrToCurrentRCG);
                                                    collector = ptrToCurrentRCG;
                                                    rcgCount += 1;
                                                
break;
case 52:

                                                    abductedNode = stack.splice(stack.length - 1, 1)[0];
                                                    if (abductedNode.__leaf__) {
                                                        valueDims.push(rcgCount);
                                                        delete abductedNode.__leaf__;
                                                    }
                                                    collector = null;
                                                    rcgCount -= 1;
                                                
break;
case 58:
 this.$ = `${
                                                    $$[$0-4] === "(" ? "lo" : "lc"
                                                }${
                                                    $$[$0] === ")" ? "ro" : "rc"
                                                }Range,${$$[$0-3] || null},${$$[$0-1] || null}` 
break;
case 66: case 81: case 82:
 collector && collector.push(this.$); 
break;
case 67: case 68: case 70: case 72:
 this.$ = ({ type: Fn,   value: $$[$0] }) 
break;
case 69: case 71:
 this.$ = ({ type: Fn,   value: AbEq, args: [$$[$0]] }) 
break;
case 73:
 this.$ = ({ type: UFn,  value: $$[$0] }) 
break;
case 86:
 this.$ = ({ type: Ref, value: $$[$0] })
break;
case 94:
 this.$ = ({ type: Rec, value: $$[$0] }) 
break;
case 98: case 102: case 106: case 112: case 146: case 148: case 162: case 164: case 170: case 172:
this.$ = [];
break;
case 99: case 103: case 107: case 113: case 119:
$$[$0-1].push($$[$0]);
break;
case 118:
this.$ = [$$[$0]];
break;
case 140:
this.$ = [$$[$0-1]];
break;
case 141: case 147: case 149: case 163: case 165: case 171: case 173:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [o($V0,[2,98],{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,10:6,11:[1,9],115:[1,7],116:[1,8]},{1:[2,1]},o($V0,[2,99]),{8:[1,10]},o($V0,[2,3]),{8:[2,100]},{8:[2,101]},{8:[1,11]},{9:12,20:$V1},{12:[1,14],14:[1,15],16:[1,16],18:[1,17]},o($V0,[2,2]),{12:$V2,14:$V3,16:$V4,18:$V5,38:18,39:19,40:$V6,41:21,42:22,44:23,46:24,48:25,51:26,53:27,56:28,59:29,62:30,65:31,68:$V7,69:37,70:39,71:$V8,85:$V9},{13:41,20:[1,42]},{15:43,20:[1,44]},{17:45,20:[1,46]},{8:[1,47]},{12:$V2,14:$V3,16:$V4,18:$V5,22:[1,48],39:49,40:$V6,41:21,42:22,44:23,46:24,48:25,51:26,53:27,56:28,59:29,62:30,65:31,68:$V7,69:37,70:39,71:$V8,85:$V9},o($Va,[2,118]),{12:$V2,14:$V3,16:$V4,18:$V5,41:50,42:22,44:23,46:24,48:25,51:26,53:27,56:28,59:29,62:30,65:31,68:$V7,69:37,70:39,71:$V8,85:$V9},o($Va,[2,16]),{25:[1,51]},{25:[1,52]},{25:[1,53]},{25:[1,54]},{25:[1,55]},{25:[1,56]},{25:[1,57]},{25:[1,58]},{25:[1,59]},{25:[1,60]},{24:61,72:$Vb},{24:63,72:$Vb},{24:64,72:$Vb},{8:[1,65]},{24:66,72:$Vb},{12:$V2,14:$V3,16:$V4,18:$V5,42:67,44:68,46:69,48:70},{24:71,72:$Vb},o([12,14,16,18],[2,36],{85:[1,72]}),{86:[1,73]},o($V0,[2,4]),o($Vc,[2,102],{21:74}),o($V0,[2,5]),o($Vc,[2,106],{28:75}),o($V0,[2,6]),o($Vc,[2,112],{33:76}),{9:80,19:77,20:$V1,73:$Vd,74:$Ve,76:$Vf},o($Vg,[2,14]),o($Va,[2,119]),o($Va,[2,15]),{24:85,26:82,72:$Vb,73:$Vh,74:$Vi,75:$Vj,76:$Vk},{31:88,73:$Vl,74:$Vm,76:$Vn,85:$Vo,87:91,88:$Vp,89:94,118:$Vq},{36:97,73:$Vr,74:$Vs,76:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx},{18:[1,109],49:105,73:[1,106],74:[1,107],76:[1,108]},{9:80,19:110,20:$V1,73:$Vd,74:$Ve,76:$Vf},{54:111,73:[1,112],74:[1,113],76:[1,118],77:114,78:115,79:116,80:119,85:$Vy,117:[1,117]},{57:121,73:[1,122],74:[1,123],76:[1,128],80:129,85:$Vy,94:124,95:125,96:126,117:[1,127]},{60:130,73:[1,131],74:[1,132],76:[1,137],80:138,85:$Vy,105:133,106:134,108:135,117:[1,136]},{63:139,73:[1,140],74:[1,141],76:[1,142],113:[1,143],114:[1,144]},{66:145,73:[1,146],74:[1,147]},{25:[2,27]},o([12,14,16,18,22,25,40,68,71,72,85,86,91],[2,38]),{25:[2,28]},{25:[2,29]},{24:148,72:$Vb},{25:[2,31]},{25:[2,32]},{25:[2,33]},{25:[2,34]},{25:[2,35]},{25:[2,37]},{86:[1,149]},o($Vz,[2,140]),{22:[1,150],23:151,24:152,72:$Vb},{22:[1,153],24:155,30:154,72:$Vb},{22:[1,156],24:158,35:157,72:$Vb},o($V0,[2,7]),o($Vg,[2,92]),o($Vg,[2,93]),o($Vg,[2,94]),o($Vg,[2,95]),o($Va,[2,120],{43:159,91:[1,160]}),o($VA,[2,39]),o($VA,[2,40]),o($VA,[2,41]),o($VA,[2,42]),o($VA,[2,43]),o($Va,[2,122],{45:161,91:[1,162]}),o($VA,[2,53]),o($VA,[2,54]),o($VA,[2,55]),o($VA,[2,56]),o($VA,[2,57]),{88:[1,164],90:163,91:[2,152]},o($VB,[2,150]),o($VB,[2,151]),o($Va,[2,124],{47:165,91:[1,166]}),o($VA,[2,67]),o($VA,[2,68]),o($VA,[2,69]),o($VA,[2,70]),o($VA,[2,71]),o($VA,[2,72]),o($VA,[2,73]),o($Va,[2,126],{50:167,91:[1,168]}),o($VC,[2,83]),o($VC,[2,84]),o($VC,[2,85]),{24:169,72:$Vb},o($Va,[2,128],{52:170,91:[1,171]}),o($Va,[2,130],{55:172,91:[1,173]}),o($VC,[2,44]),o($VC,[2,45]),o($VC,[2,46]),{77:174,79:116,80:119,85:$Vy},o($VC,[2,48]),{85:[2,142]},{85:[2,143]},o($VD,[2,144],{80:119,81:175,79:176,24:177,72:$Vb,85:$Vy}),o([72,85,86,88,91,101,103],[2,51]),o($Va,[2,132],{58:178,91:[1,179]}),o($VC,[2,59]),o($VC,[2,60]),o($VC,[2,61]),{80:129,85:$Vy,94:180,96:126},o($VC,[2,63]),{85:[2,158]},{85:[2,159]},o($VD,[2,160],{80:129,97:181,96:182,100:183,85:$Vy,88:$VE}),o($Va,[2,134],{61:185,91:[1,186]}),o($VC,[2,74]),o($VC,[2,75]),o($VC,[2,76]),{107:[1,187]},o($VC,[2,78]),{107:[2,166]},{107:[2,167]},o($VD,[2,168],{80:138,109:188,108:189,112:190,85:$Vy,101:$VF,103:$VG}),o($Va,[2,136],{64:193,91:[1,194]}),o($VC,[2,87]),o($VC,[2,88]),o($VC,[2,89]),o($VC,[2,90]),o($VC,[2,91]),o($Va,[2,138],{67:195,91:[1,196]}),o($VC,[2,96]),o($VC,[2,97]),{25:[2,30]},o($Vz,[2,141]),o($V0,[2,8]),o($Vc,[2,103]),{25:[1,197]},o($V0,[2,108],{29:198,91:[1,199]}),o($Vc,[2,107]),{25:[1,200]},o($V0,[2,114],{34:201,91:[1,202]}),o($Vc,[2,113]),{25:[1,203]},o($Va,[2,17]),o($Va,[2,121]),o($Va,[2,18]),o($Va,[2,123]),{91:[1,204]},{91:[2,153]},o($Va,[2,19]),o($Va,[2,125]),o($Va,[2,20]),o($Va,[2,127]),o($VC,[2,86]),o($Va,[2,21]),o($Va,[2,129]),o($Va,[2,22]),o($Va,[2,131]),o($VC,[2,47]),o($VD,[2,146],{82:205}),o($VD,[2,148],{84:206}),o($VD,[2,145]),o($Va,[2,23]),o($Va,[2,133]),o($VC,[2,62]),o($VD,[2,162],{98:207}),o($VD,[2,164],{99:208}),o($VD,[2,161]),o($VD,[2,66]),o($Va,[2,24]),o($Va,[2,135]),o($VC,[2,77]),o($VD,[2,170],{110:209}),o($VD,[2,172],{111:210}),o($VD,[2,169]),o($VD,[2,81]),o($VD,[2,82]),o($Va,[2,25]),o($Va,[2,137]),o($Va,[2,26]),o($Va,[2,139]),{24:85,26:211,72:$Vb,73:$Vh,74:$Vi,75:$Vj,76:$Vk},o($V0,[2,10]),o($V0,[2,109]),{31:212,73:$Vl,74:$Vm,76:$Vn,85:$Vo,87:91,88:$Vp,89:94,118:$Vq},o($V0,[2,12]),o($V0,[2,115]),{36:213,73:$Vr,74:$Vs,76:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx},o($VH,[2,154],{92:214,88:[1,215]}),{83:216,86:$VI,91:[1,217]},{83:219,86:$VI,91:[1,220]},{83:221,86:$VI,91:[1,222]},{83:223,86:$VI,91:[1,224]},{83:225,86:$VI,91:[1,226]},{83:227,86:$VI,91:[1,228]},o($Vc,[2,104],{27:229,91:[1,230]}),o($Vc,[2,110],{32:231,91:[1,232]}),o($Vc,[2,116],{37:233,91:[1,234]}),{86:[1,236],93:235,119:[1,237]},o($VH,[2,155]),o($VJ,[2,49]),{24:238,72:$Vb},o($VJ,[2,52]),o($VJ,[2,50]),{79:239,80:119,85:$Vy},o($VJ,[2,64]),{88:$VE,100:240},o($VJ,[2,65]),{80:129,85:$Vy,96:241},o($VJ,[2,79]),{101:$VF,103:$VG,112:242},o($VJ,[2,80]),{80:138,85:$Vy,108:243},o($Vc,[2,9]),o($Vc,[2,105]),o($Vc,[2,11]),o($Vc,[2,111]),o($Vc,[2,13]),o($Vc,[2,117]),o($VA,[2,58]),o($VA,[2,156]),o($VA,[2,157]),o($VD,[2,147]),o($VD,[2,149]),o($VD,[2,163]),o($VD,[2,165]),o($VD,[2,171]),o($VD,[2,173])],
defaultActions: {3:[2,1],7:[2,100],8:[2,101],61:[2,27],63:[2,28],64:[2,29],66:[2,31],67:[2,32],68:[2,33],69:[2,34],70:[2,35],71:[2,37],117:[2,142],118:[2,143],127:[2,158],128:[2,159],136:[2,166],137:[2,167],148:[2,30],164:[2,153]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* Alert: https://stackoverflow.com/a/34339368/2474269 */

parseTree = require('./parse-tree');

Word = parseTree.Word
Program = Word.Program
StructureDefinition = Word.StructureDefinition
StructureIdentifier = Word.StructureIdentifier
StructureBody = Word.StructureBody
PairDefinition = Word.PairDefinition
PairComponentKey = Word.PairComponentKey
PairComponentValue = Word.PairComponentValue

Str = Word.Str
OList = Word.OList
Enum = Word.Enum
Num = Word.Num
Bool = Word.Bool
Ref = Word.Ref
Obj = Word.Obj
Arr = Word.Arr
Any = Word.Any
Fn = Word.Fn
AbEq = Word.AbEq
UFn = Word.UFn
Rec = Word.Rec

dim = null
collector = null
buffer = null
rcg = null /* rcg = recursiveCollectorGroup */
stack = []
valueDims = [];
ptrToCurrentRCG = null
pathRCG = null
rcgCount = 0

bits = 0x00
// RightToLeft
arrF = 0x01 // Array found

function setArrFoundBit() {
    bits = bits | arrF;
    return true;
}

function isArrFound() {
    return bits & arrF;
}

function resetFoundBits() {
    bits = 0x00;
}

function checkAndResetArrayDefEquality() {
    buffer = rcg;
    // rcgCount and stack would reset to ideal count here
    rcg = null;
    ptrToCurrentRCG = null;
    dimEqstatus = valueDims.reduce(
        (carry, val) => val === carry ? carry : -1,
        dim
    );
    if (dimEqstatus === -1) {
        throw new Error('Array dimension does not match');
    }
    valueDims.length = 0;
}

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */
break;
case 1:return 115
break;
case 2:return 116
break;
case 3:return 40
break;
case 4:return 11
break;
case 5:return 12
break;
case 6:return 14
break;
case 7:return 16
break;
case 8:return 68
break;
case 9:return 73
break;
case 10:return 74
break;
case 11:return 101
break;
case 12:return 103
break;
case 13:return 102
break;
case 14:return 104
break;
case 15:return 71
break;
case 16:return 113
break;
case 17:return 114
break;
case 18:return 117
break;
case 19:return 85
break;
case 20:return 86
break;
case 21:return 118
break;
case 22:return 119
break;
case 23:return 20
break;
case 24:return 22
break;
case 25:return 18
break;
case 26:return 'OR'
break;
case 27:return 25
break;
case 28:return 91
break;
case 29:return 'NOT'
break;
case 30:return 75
break;
case 31:return 8
break;
case 32:return 76
break;
case 33:return 88
break;
case 34:return 72
break;
case 35:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:typdef\b)/,/^(?:olist\b)/,/^(?:optnl\b)/,/^(?:enum\b)/,/^(?:str\b)/,/^(?:num\b)/,/^(?:bool\b)/,/^(?:obj\b)/,/^(?:pass\b)/,/^(?:fail\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:truthy\b)/,/^(?:falsy\b)/,/^(?:any\b)/,/^(?:anyOf\b)/,/^(?:allOf\b)/,/^(?:unordered\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:`)/,/^(?:\|)/,/^(?::)/,/^(?:,)/,/^(?:!)/,/^(?:(\/.*\/))/,/^(?:([A-Z][a-zA-Z0-9_]*))/,/^(?:([a-zA-Z_]+[a-zA-Z0-9_]*))/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:("[^"]*"))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = helson;
exports.Parser = helson.Parser;
exports.parse = function () { return helson.parse.apply(helson, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}