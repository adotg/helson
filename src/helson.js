/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var helson = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,7,11],$V1=[1,11],$V2=[1,12],$V3=[1,31],$V4=[1,32],$V5=[1,33],$V6=[1,34],$V7=[1,39],$V8=[1,19],$V9=[1,35],$Va=[1,37],$Vb=[12,14,16,18,22,42,46,78,81],$Vc=[12,14,16,18,22,42,44,46,78,81],$Vd=[1,63],$Ve=[12,14,16,18,42,44,46,78,81],$Vf=[22,82],$Vg=[5,7,11,12,14,16,18,22,42,44,46,78,81,97],$Vh=[1,122],$Vi=[12,14,16,18,42],$Vj=[12,14,16,18,22,42,44,46,78,81,97],$Vk=[30,97],$Vl=[44,97],$Vm=[1,180],$Vn=[1,186],$Vo=[1,187],$Vp=[44,117],$Vq=[1,219],$Vr=[22,82,97];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_repetition0":4,"EOF":5,"structs":6,"TYPEDEF":7,"S_ID":8,"def_body":9,"enum":10,"ENUM":11,"STR":12,"str_enum_body":13,"NUM":14,"num_enum_body":15,"BOOL":16,"bool_enum_body":17,"REFERENCE":18,"obj_enum_body":19,"OPEN_CURB":20,"str_enum_body_repetition0":21,"CLOSE_CURB":22,"str_pair":23,"attr":24,"COLON":25,"str_pair_option0":26,"num_enum_body_repetition0":27,"num_enum_body_option0":28,"num_pair":29,"NUMERIC":30,"num_pair_option0":31,"bool_enum_body_repetition0":32,"bool_enum_body_option0":33,"bool_pair":34,"bool_pair_group0":35,"bool_pair_option0":36,"obj_enum_body_repetition0":37,"obj_pair":38,"ANYTHING":39,"obj_pair_option0":40,"def_body_repetition_plus0":41,"OPEN_SQB":42,"def_body_repetition_plus1":43,"CLOSE_SQB":44,"pair":45,"OPTIONAL":46,"pair_def":47,"str_key":48,"str_value":49,"pair_def_option0":50,"num_key":51,"num_value":52,"pair_def_option1":53,"bool_key":54,"bool_value":55,"pair_def_option2":56,"ref_key":57,"ref_value":58,"pair_def_option3":59,"obj_key":60,"obj_value":61,"pair_def_option4":62,"str_arr_key":63,"str_arr_value":64,"pair_def_option5":65,"num_arr_key":66,"num_arr_value":67,"pair_def_option6":68,"bool_arr_key":69,"bool_arr_value":70,"pair_def_option7":71,"ref_arr_key":72,"ref_arr_value":73,"pair_def_option8":74,"any_key":75,"any_value":76,"pair_def_option9":77,"OBJ":78,"sqbs":79,"sqbs_repetition_plus0":80,"ANY":81,"TEXT":82,"IDENTITY":83,"FAIL":84,"REGEX":85,"CTX_USER_FN":86,"str_arr_body_valid":87,"str_arr_body":88,"open_sqb_hook":89,"str_arr_body_option0":90,"str_arr_body_repetition0":91,"close_sqb_hook":92,"str_arr_body_repetition1":93,"intervals":94,"intervals_group0":95,"intervals_option0":96,"COMMA":97,"intervals_option1":98,"intervals_group1":99,"num_arr_body_valid":100,"num_arr_body":101,"num_arr_body_option0":102,"num_arr_body_repetition0":103,"num_arr_body_repetition1":104,"num_val_proxy":105,"TRUE":106,"TRUTHY":107,"FALSE":108,"FALSY":109,"bool_arr_body_valid":110,"bool_arr_body":111,"bool_arr_body_option0":112,"bool_arr_body_repetition0":113,"bool_arr_body_repetition1":114,"bool_val_proxy":115,"OPEN_BRAC":116,"CLOSE_BRAC":117,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"TYPEDEF",8:"S_ID",11:"ENUM",12:"STR",14:"NUM",16:"BOOL",18:"REFERENCE",20:"OPEN_CURB",22:"CLOSE_CURB",25:"COLON",30:"NUMERIC",39:"ANYTHING",42:"OPEN_SQB",44:"CLOSE_SQB",46:"OPTIONAL",78:"OBJ",81:"ANY",82:"TEXT",83:"IDENTITY",84:"FAIL",85:"REGEX",86:"CTX_USER_FN",97:"COMMA",106:"TRUE",107:"TRUTHY",108:"FALSE",109:"FALSY",116:"OPEN_BRAC",117:"CLOSE_BRAC"},
productions_: [0,[3,2],[6,3],[6,1],[10,4],[10,4],[10,4],[10,5],[13,3],[23,4],[15,4],[29,4],[17,4],[34,4],[19,3],[38,4],[9,3],[9,3],[45,2],[45,1],[47,4],[47,4],[47,4],[47,4],[47,4],[47,4],[47,4],[47,4],[47,4],[47,4],[48,2],[51,2],[54,2],[57,3],[60,2],[63,2],[66,2],[69,2],[72,2],[79,1],[75,2],[24,1],[49,1],[49,1],[49,1],[49,1],[49,1],[64,1],[64,1],[64,1],[64,1],[87,1],[88,4],[88,4],[89,1],[92,1],[52,1],[52,1],[52,1],[52,1],[52,1],[94,5],[67,1],[67,1],[67,1],[67,1],[100,1],[101,4],[101,4],[105,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[70,1],[70,1],[70,1],[70,1],[110,1],[111,4],[111,4],[115,1],[115,1],[58,1],[58,1],[58,1],[58,2],[73,1],[73,1],[73,1],[61,1],[61,1],[61,1],[61,1],[76,1],[76,1],[76,1],[4,0],[4,2],[21,0],[21,2],[26,0],[26,1],[27,0],[27,2],[28,0],[28,1],[31,0],[31,1],[32,0],[32,2],[33,0],[33,1],[35,1],[35,1],[36,0],[36,1],[37,0],[37,2],[40,0],[40,1],[41,1],[41,2],[43,1],[43,2],[50,0],[50,1],[53,0],[53,1],[56,0],[56,1],[59,0],[59,1],[62,0],[62,1],[65,0],[65,1],[68,0],[68,1],[71,0],[71,1],[74,0],[74,1],[77,0],[77,1],[80,2],[80,3],[90,0],[90,1],[91,0],[91,3],[93,0],[93,3],[95,1],[95,1],[96,0],[96,1],[98,0],[98,1],[99,1],[99,1],[102,0],[102,1],[103,0],[103,3],[104,0],[104,3],[112,0],[112,1],[113,0],[113,3],[114,0],[114,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return parseTree.makeEntry(Program, { /* empty */ }, $$[$0-1]) 
break;
case 2:

                                                    _arrFoundFlag = isArrFound()
                                                    resetFoundBits()
                                                    /* if ($$[$0][0] === OList && _arrFoundFlag) { */
                                                        // probably a valid caase; not required to throw error
                                                        /* throw new Error("An ordered list (olist) can't have unbounded array member") */
                                                    /* } */
                                                    this.$ = parseTree.makeEntry(StructureDefinition, {},
                                                        [parseTree.makeEntry(StructureIdentifier, { type: $$[$0][0], id: $$[$0-1] }), $$[$0][1]])
                                                
break;
case 3:
 this.$ = parseTree.makeEntry(StructureDefinition, {}, [$$[$0][0] /* identifier */, $$[$0][1] /* body */]) 
break;
case 4:
 this.$ = [parseTree.makeEntry(StructureIdentifier, { type: $$[$0-3], id: $$[$0-2], typeArgs: Str  }), $$[$0]] 
break;
case 5:
 this.$ = [parseTree.makeEntry(StructureIdentifier, { type: $$[$0-3], id: $$[$0-2], typeArgs: Num  }), $$[$0]] 
break;
case 6:
 this.$ = [parseTree.makeEntry(StructureIdentifier, { type: $$[$0-3], id: $$[$0-2], typeArgs: Bool }), $$[$0]] 
break;
case 7:
 this.$ = [parseTree.makeEntry(StructureIdentifier, { type: $$[$0-4], id: $$[$0-3], typeArgs: Ref, subType: $$[$0-1] }), $$[$0]] 
break;
case 8: case 14:
this.$ = parseTree.makeEntry(StructureBody, {}, $$[$0-1]);
break;
case 9:

                                                    this.$ = parseTree.makeEntry(PairDefinition, {}, [
                                                        parseTree.makeEntry(PairComponentKey, { id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, { 
                                                            type: Word.Fn,
                                                            value: Word.AbEq,
                                                            args: [$$[$0-1]]
                                                        })
                                                    ])
                                                
break;
case 10: case 12:
this.$ = parseTree.makeEntry(StructureBody, {}, $$[$0-2]);
break;
case 11:

                                                    this.$ = parseTree.makeEntry(PairDefinition, {}, [
                                                        parseTree.makeEntry(PairComponentKey, { id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, {
                                                            type: Word.Fn,
                                                            value: Word.AbEq,
                                                            args: [+$$[$0-1]]
                                                        })
                                                    ])
                                                
break;
case 13:

                                                    this.$ = parseTree.makeEntry(PairDefinition, {}, [
                                                        parseTree.makeEntry(PairComponentKey, { id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, {
                                                            type: Word.Fn,
                                                            value: Word.AbEq,
                                                            args: [$$[$0-1]]
                                                        })
                                                    ])
                                                
break;
case 15:

                                                    // WARN Validation happens after the ast is prepared
                                                    match = $$[$0-1].match(/\((.+)\)/)
                                                    this.$ = parseTree.makeEntry(PairDefinition, {}, [
                                                        parseTree.makeEntry(PairComponentKey, { id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, {
                                                            type: Word.Fn,
                                                            value: Word.AbEq,
                                                            args: match[1]
                                                        })
                                                    ])
                                                
break;
case 16:
 this.$ = [TypeDef, parseTree.makeEntry(StructureBody, {}, $$[$0-1])] 
break;
case 17:
 this.$ = [OList, parseTree.makeEntry(StructureBody, {}, $$[$0-1])] 
break;
case 18:
this.$ = parseTree.makeEntry(PairDefinition, { isOptional: true }, $$[$0]);
break;
case 19:
this.$ = parseTree.makeEntry(PairDefinition, { isOptional: false }, $$[$0]);
break;
case 20:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Str, id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 21:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Num, id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 22:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Bool, id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 23:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Ref, typeArgs: $$[$0-3][0], id: $$[$0-3][1] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 24:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Obj, id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 25:
 
                                                    setArrFoundBit()
                                                    this.$ = [
                                                        parseTree.makeEntry(
                                                            PairComponentKey,
                                                            {
                                                                type: Arr,
                                                                typeArgs: Str,
                                                                id: $$[$0-3],
                                                                dim: dim
                                                            }
                                                        ),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1])
                                                    ] 
                                                
break;
case 26:

                                                    setArrFoundBit()
                                                    this.$ = [
                                                        parseTree.makeEntry(
                                                            PairComponentKey,
                                                            {
                                                                type: Arr,
                                                                typeArgs: Num,
                                                                id: $$[$0-3],
                                                                dim: dim
                                                            }
                                                        ),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1])
                                                    ]
                                                
break;
case 27:

                                                    setArrFoundBit()
                                                    this.$ = [
                                                        parseTree.makeEntry(
                                                            PairComponentKey,
                                                            {
                                                                type: Arr,
                                                                typeArgs: Bool,
                                                                id: $$[$0-3],
                                                                dim: dim
                                                            }
                                                        ),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1])
                                                    ]
                                                
break;
case 28:

                                                    setArrFoundBit()
                                                    this.$ = [
                                                            parseTree.makeEntry(
                                                                PairComponentKey,
                                                                {
                                                                    type: Arr,
                                                                    typeArgs: Word.Ref,
                                                                    subType: $$[$0-3][0][0],
                                                                    id: $$[$0-3][0][1],
                                                                    dim: $$[$0-3][1]
                                                                }
                                                            ),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1])
                                                    ]
                                                    /* 
                                                     * For reference key the dimensionality is not checked from the
                                                     * parser, hence it's not stored in a local variable
                                                     */
                                                
break;
case 29:
 this.$ = [ parseTree.makeEntry(PairComponentKey, { type: Any, id: $$[$0-3] }),
                                                        parseTree.makeEntry(PairComponentValue, $$[$0-1]) ] 
break;
case 30: case 31: case 32: case 34: case 40:
 this.$ = $$[$0] 
break;
case 33:
 this.$ = [$$[$0-1], $$[$0]] 
break;
case 35: case 36: case 37:
 dim = $$[$0-1].length; this.$ = $$[$0] 
break;
case 38:
this.$ = [$$[$0], $$[$0-1].length /* dimension */]
break;
case 41:
 this.$ = yytext.replace(/^"|"$/g, ''); collector && collector.push(this.$); 
break;
case 42: case 43: case 47: case 48: case 56: case 57: case 58: case 62: case 63: case 77: case 78: case 86: case 87: case 90: case 91: case 93: case 94: case 97: case 98:
 this.$ = ({ type: Fn,  value: $$[$0] }) 
break;
case 44:
 this.$ = ({ type: Fn,  value: AbEq, args: [$$[$0]] }) 
break;
case 45:
 this.$ = ({ type: Fn,  value: AbEq, args: [$$[$0], Word.Transformer.Str.Pattern] }) 
break;
case 46: case 60: case 88: case 92: case 96: case 99:
 this.$ = ({ type: UFn, value: $$[$0] }) 
break;
case 49: case 64: case 79:
 this.$ = ({ type: Fn,  value: ArrAbEq, args: [$$[$0]] }) 
break;
case 50: case 65: case 76: case 80:
 this.$ = ({ type: UFn,  value: $$[$0] }) 
break;
case 51: case 66: case 81:
 checkAndResetArrayDefEquality(); this.$ = buffer; 
break;
case 52: case 53: case 67: case 68: case 82: case 83:
 this.$ = rcg 
break;
case 54:

                                                    ptrToCurrentRCG = [];
                                                    if (parent = stack[stack.length - 1]) {
                                                        delete parent.__leaf__;
                                                        parent.push(ptrToCurrentRCG);
                                                    } else {
                                                        // Start of stack. Root.
                                                        rcg = ptrToCurrentRCG 
                                                    }
                                                    // Assign a leaf flag which later be deleted if the node becomes
                                                    // parent
                                                    ptrToCurrentRCG.__leaf__ = true;
                                                    stack.push(ptrToCurrentRCG);
                                                    collector = ptrToCurrentRCG;
                                                    rcgCount += 1;
                                                
break;
case 55:

                                                    abductedNode = stack.splice(stack.length - 1, 1)[0];
                                                    if (abductedNode.__leaf__) {
                                                        valueDims.push(rcgCount);
                                                        delete abductedNode.__leaf__;
                                                    }
                                                    collector = null;
                                                    rcgCount -= 1;
                                                
break;
case 59:
 this.$ = ({ type: Fn,  value: AbEq, args: [+$$[$0]] }) 
break;
case 61:
 this.$ = `${
                                                    $$[$0-4] === "(" ? "lo" : "lc"
                                                }${
                                                    $$[$0] === ")" ? "ro" : "rc"
                                                }Range,${$$[$0-3] || null},${$$[$0-1] || null}` 
break;
case 69:
 collector && collector.push(+this.$); 
break;
case 70: case 71: case 73: case 75:
 this.$ = ({ type: Fn,   value: $$[$0] }) 
break;
case 72: case 74:
 this.$ = ({ type: Fn,   value: AbEq, args: [$$[$0]] }) 
break;
case 84: case 85:
 collector && collector.push(this.$); 
break;
case 89:
 this.$ = ({ type: Ref, value: $$[$0] }) 
break;
case 95:
 this.$ = ({ type: Rec, value: $$[$0][1] }) 
break;
case 100: case 102: case 106: case 112: case 120: case 152: case 154: case 166: case 168: case 172: case 174:
this.$ = [];
break;
case 101: case 103: case 107: case 113: case 121: case 125: case 127:
$$[$0-1].push($$[$0]);
break;
case 124: case 126:
this.$ = [$$[$0]];
break;
case 148:
this.$ = [$$[$0-1]];
break;
case 149: case 153: case 155: case 167: case 169: case 173: case 175:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [o($V0,[2,100],{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:[1,5],10:6,11:[1,7]},{1:[2,1]},o($V0,[2,101]),{8:[1,8]},o($V0,[2,3]),{8:[1,9]},{9:10,20:$V1,42:$V2},{12:[1,13],14:[1,14],16:[1,15],18:[1,16]},o($V0,[2,2]),{12:$V3,14:$V4,16:$V5,18:$V6,41:17,42:$V7,45:18,46:$V8,47:20,48:21,51:22,54:23,57:24,60:25,63:26,66:27,69:28,72:29,75:30,78:$V9,79:36,80:38,81:$Va},{12:$V3,14:$V4,16:$V5,18:$V6,42:$V7,43:40,45:41,46:$V8,47:20,48:21,51:22,54:23,57:24,60:25,63:26,66:27,69:28,72:29,75:30,78:$V9,79:36,80:38,81:$Va},{13:42,20:[1,43]},{15:44,20:[1,45]},{17:46,20:[1,47]},{8:[1,48]},{12:$V3,14:$V4,16:$V5,18:$V6,22:[1,49],42:$V7,45:50,46:$V8,47:20,48:21,51:22,54:23,57:24,60:25,63:26,66:27,69:28,72:29,75:30,78:$V9,79:36,80:38,81:$Va},o($Vb,[2,124]),{12:$V3,14:$V4,16:$V5,18:$V6,42:$V7,47:51,48:21,51:22,54:23,57:24,60:25,63:26,66:27,69:28,72:29,75:30,78:$V9,79:36,80:38,81:$Va},o($Vc,[2,19]),{25:[1,52]},{25:[1,53]},{25:[1,54]},{25:[1,55]},{25:[1,56]},{25:[1,57]},{25:[1,58]},{25:[1,59]},{25:[1,60]},{25:[1,61]},{24:62,82:$Vd},{24:64,82:$Vd},{24:65,82:$Vd},{8:[1,66]},{24:67,82:$Vd},{12:$V3,14:$V4,16:$V5,18:$V6,48:68,51:69,54:70,57:71},{24:72,82:$Vd},o([12,14,16,18],[2,39],{42:[1,73]}),{44:[1,74]},{12:$V3,14:$V4,16:$V5,18:$V6,42:$V7,44:[1,75],45:76,46:$V8,47:20,48:21,51:22,54:23,57:24,60:25,63:26,66:27,69:28,72:29,75:30,78:$V9,79:36,80:38,81:$Va},o($Ve,[2,126]),o($V0,[2,4]),o($Vf,[2,102],{21:77}),o($V0,[2,5]),o($Vf,[2,106],{27:78}),o($V0,[2,6]),o($Vf,[2,112],{32:79}),{19:80,20:[1,81]},o($Vg,[2,16]),o($Vb,[2,125]),o($Vc,[2,18]),{24:85,49:82,82:$Vd,83:[1,83],84:[1,84],85:[1,86],86:[1,87]},{30:[1,92],42:[1,96],52:88,83:[1,89],84:[1,90],86:[1,93],94:91,95:94,116:[1,95]},{55:97,83:[1,98],84:[1,99],86:[1,104],106:[1,100],107:[1,101],108:[1,102],109:[1,103]},{18:[1,109],58:105,83:[1,106],84:[1,107],86:[1,108]},{9:113,20:$V1,42:$V2,61:110,83:[1,111],84:[1,112],86:[1,114]},{42:$Vh,64:115,83:[1,116],84:[1,117],86:[1,119],87:118,88:120,89:121},{42:$Vh,67:123,83:[1,124],84:[1,125],86:[1,127],89:129,100:126,101:128},{42:$Vh,70:130,83:[1,131],84:[1,132],86:[1,134],89:136,110:133,111:135},{73:137,83:[1,138],84:[1,139],86:[1,140]},{76:141,83:[1,142],84:[1,143],86:[1,144]},{25:[2,30]},o([12,14,16,18,22,25,42,44,46,78,81,82,97],[2,41]),{25:[2,31]},{25:[2,32]},{24:145,82:$Vd},{25:[2,34]},{25:[2,35]},{25:[2,36]},{25:[2,37]},{25:[2,38]},{25:[2,40]},{44:[1,146]},o($Vi,[2,148]),o($Vg,[2,17]),o($Ve,[2,127]),{22:[1,147],23:148,24:149,82:$Vd},{22:[1,150],24:152,29:151,82:$Vd},{22:[1,153],24:155,34:154,82:$Vd},o($V0,[2,7]),o($Vf,[2,120],{37:156}),o($Vc,[2,128],{50:157,97:[1,158]}),o($Vj,[2,42]),o($Vj,[2,43]),o($Vj,[2,44]),o($Vj,[2,45]),o($Vj,[2,46]),o($Vc,[2,130],{53:159,97:[1,160]}),o($Vj,[2,56]),o($Vj,[2,57]),o($Vj,[2,58]),o($Vj,[2,59]),o($Vj,[2,60]),{30:[1,162],96:161,97:[2,158]},o($Vk,[2,156]),o($Vk,[2,157]),o($Vc,[2,132],{56:163,97:[1,164]}),o($Vj,[2,70]),o($Vj,[2,71]),o($Vj,[2,72]),o($Vj,[2,73]),o($Vj,[2,74]),o($Vj,[2,75]),o($Vj,[2,76]),o($Vc,[2,134],{59:165,97:[1,166]}),o($Vj,[2,86]),o($Vj,[2,87]),o($Vj,[2,88]),{24:167,82:$Vd},o($Vc,[2,136],{62:168,97:[1,169]}),o($Vj,[2,93]),o($Vj,[2,94]),o($Vj,[2,95]),o($Vj,[2,96]),o($Vc,[2,138],{65:170,97:[1,171]}),o($Vj,[2,47]),o($Vj,[2,48]),o($Vj,[2,49]),o($Vj,[2,50]),o($Vj,[2,51]),o($Vl,[2,150],{89:121,90:172,88:173,24:174,42:$Vh,82:$Vd}),o([30,42,44,82,97,106,108],[2,54]),o($Vc,[2,140],{68:175,97:[1,176]}),o($Vj,[2,62]),o($Vj,[2,63]),o($Vj,[2,64]),o($Vj,[2,65]),o($Vj,[2,66]),o($Vl,[2,164],{89:129,102:177,101:178,105:179,30:$Vm,42:$Vh}),o($Vc,[2,142],{71:181,97:[1,182]}),o($Vj,[2,77]),o($Vj,[2,78]),o($Vj,[2,79]),o($Vj,[2,80]),o($Vj,[2,81]),o($Vl,[2,170],{89:136,112:183,111:184,115:185,42:$Vh,106:$Vn,108:$Vo}),o($Vc,[2,144],{74:188,97:[1,189]}),o($Vj,[2,90]),o($Vj,[2,91]),o($Vj,[2,92]),o($Vc,[2,146],{77:190,97:[1,191]}),o($Vj,[2,97]),o($Vj,[2,98]),o($Vj,[2,99]),{25:[2,33]},o($Vi,[2,149]),o($V0,[2,8]),o($Vf,[2,103]),{25:[1,192]},o($V0,[2,108],{28:193,97:[1,194]}),o($Vf,[2,107]),{25:[1,195]},o($V0,[2,114],{33:196,97:[1,197]}),o($Vf,[2,113]),{25:[1,198]},{22:[1,199],24:201,38:200,82:$Vd},o($Vc,[2,20]),o($Vc,[2,129]),o($Vc,[2,21]),o($Vc,[2,131]),{97:[1,202]},{97:[2,159]},o($Vc,[2,22]),o($Vc,[2,133]),o($Vc,[2,23]),o($Vc,[2,135]),o($Vj,[2,89]),o($Vc,[2,24]),o($Vc,[2,137]),o($Vc,[2,25]),o($Vc,[2,139]),o($Vl,[2,152],{91:203}),o($Vl,[2,154],{93:204}),o($Vl,[2,151]),o($Vc,[2,26]),o($Vc,[2,141]),o($Vl,[2,166],{103:205}),o($Vl,[2,168],{104:206}),o($Vl,[2,165]),o($Vl,[2,69]),o($Vc,[2,27]),o($Vc,[2,143]),o($Vl,[2,172],{113:207}),o($Vl,[2,174],{114:208}),o($Vl,[2,171]),o($Vl,[2,84]),o($Vl,[2,85]),o($Vc,[2,28]),o($Vc,[2,145]),o($Vc,[2,29]),o($Vc,[2,147]),{24:209,82:$Vd},o($V0,[2,10]),o($V0,[2,109]),{30:[1,210]},o($V0,[2,12]),o($V0,[2,115]),{35:211,106:[1,212],108:[1,213]},o($V0,[2,14]),o($Vf,[2,121]),{25:[1,214]},o($Vp,[2,160],{98:215,30:[1,216]}),{44:$Vq,92:217,97:[1,218]},{44:$Vq,92:220,97:[1,221]},{44:$Vq,92:222,97:[1,223]},{44:$Vq,92:224,97:[1,225]},{44:$Vq,92:226,97:[1,227]},{44:$Vq,92:228,97:[1,229]},o($Vf,[2,104],{26:230,97:[1,231]}),o($Vf,[2,110],{31:232,97:[1,233]}),o($Vf,[2,118],{36:234,97:[1,235]}),o($Vr,[2,116]),o($Vr,[2,117]),{39:[1,236]},{44:[1,238],99:237,117:[1,239]},o($Vp,[2,161]),o($Vj,[2,52]),{24:240,82:$Vd},o($Vj,[2,55]),o($Vj,[2,53]),{42:$Vh,88:241,89:121},o($Vj,[2,67]),{30:$Vm,105:242},o($Vj,[2,68]),{42:$Vh,89:129,101:243},o($Vj,[2,82]),{106:$Vn,108:$Vo,115:244},o($Vj,[2,83]),{42:$Vh,89:136,111:245},o($Vf,[2,9]),o($Vf,[2,105]),o($Vf,[2,11]),o($Vf,[2,111]),o($Vf,[2,13]),o($Vf,[2,119]),o($Vf,[2,122],{40:246,97:[1,247]}),o($Vj,[2,61]),o($Vj,[2,162]),o($Vj,[2,163]),o($Vl,[2,153]),o($Vl,[2,155]),o($Vl,[2,167]),o($Vl,[2,169]),o($Vl,[2,173]),o($Vl,[2,175]),o($Vf,[2,15]),o($Vf,[2,123])],
defaultActions: {3:[2,1],62:[2,30],64:[2,31],65:[2,32],67:[2,34],68:[2,35],69:[2,36],70:[2,37],71:[2,38],72:[2,40],145:[2,33],162:[2,159]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* Alert: https://stackoverflow.com/a/34339368/2474269 */

// TODO recursive enum not supported, throw error message

parseTree = require('./parse-tree');

Word = parseTree.Word
Program = Word.Program
StructureDefinition = Word.StructureDefinition
StructureIdentifier = Word.StructureIdentifier
StructureBody = Word.StructureBody
PairDefinition = Word.PairDefinition
PairComponentKey = Word.PairComponentKey
PairComponentValue = Word.PairComponentValue

Str = Word.Str
OList = Word.OList
Enum = Word.Enum
Num = Word.Num
Bool = Word.Bool
Ref = Word.Ref
Obj = Word.Obj
Arr = Word.Arr
Any = Word.Any
Fn = Word.Fn
AbEq = Word.AbEq
ArrAbEq = Word.ArrAbEq
UFn = Word.UFn
Rec = Word.Rec
TypeDef = Word.TypeDef

dim = null
collector = null
buffer = null
rcg = null /* rcg = recursiveCollectorGroup */
stack = []
valueDims = [];
ptrToCurrentRCG = null
pathRCG = null
rcgCount = 0

bits = 0x00
// RightToLeft
arrF = 0x01 // Array found

function setArrFoundBit() {
    bits = bits | arrF;
    return true;
}

function isArrFound() {
    return bits & arrF;
}

function resetFoundBits() {
    bits = 0x00;
}

function checkAndResetArrayDefEquality() {
    buffer = rcg;
    // rcgCount and stack would reset to ideal count here
    rcg = null;
    ptrToCurrentRCG = null;
    dimEqstatus = valueDims.reduce(
        (carry, val) => val === carry ? carry : -1,
        dim
    );
    if (dimEqstatus === -1) {
        throw new Error('Array dimension does not match');
    }
    valueDims.length = 0;
}

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */
break;
case 1: this.begin('fn'); return 7; 
break;
case 2:return 'OLIST'
break;
case 3:return 46
break;
case 4: this.begin('grp'); return 11; 
break;
case 5:return 12
break;
case 6:return 14
break;
case 7:return 16
break;
case 8:return 78
break;
case 9:return 83
break;
case 10:return 84
break;
case 11:return 106
break;
case 12:return 108
break;
case 13:return 107
break;
case 14:return 109
break;
case 15:return 81
break;
case 16:return 'ANYOF'
break;
case 17:return 'ALLOF'
break;
case 18:return 'UNORDERED'
break;
case 19:return 42
break;
case 20:return 44
break;
case 21:return 116
break;
case 22:return 117
break;
case 23:return 20
break;
case 24:return 22
break;
case 25:return 18
break;
case 26:return 'OR'
break;
case 27:return 25
break;
case 28:return 97
break;
case 29:return 'NOT'
break;
case 30:return 85
break;
case 31:return 8
break;
case 32:return 86
break;
case 33:return 30
break;
case 34:return 82
break;
case 35:return 39
break;
case 36:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:typedef\b)/,/^(?:olist\b)/,/^(?:optnl\b)/,/^(?:enum\b)/,/^(?:str\b)/,/^(?:num\b)/,/^(?:bool\b)/,/^(?:obj\b)/,/^(?:pass\b)/,/^(?:fail\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:truthy\b)/,/^(?:falsy\b)/,/^(?:any\b)/,/^(?:anyOf\b)/,/^(?:allOf\b)/,/^(?:unordered\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:`)/,/^(?:\|)/,/^(?::)/,/^(?:,)/,/^(?:!)/,/^(?:(\/.*\/))/,/^(?:([A-Z][a-zA-Z0-9_]*))/,/^(?:([a-zA-Z_]+[a-zA-Z0-9_]*))/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:("[^"]*"))/,/^(?:(\(.+\)))/,/^(?:$)/],
conditions: {"fn":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36],"inclusive":true},"grp":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,36],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = helson;
exports.Parser = helson.Parser;
exports.parse = function () { return helson.parse.apply(helson, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}